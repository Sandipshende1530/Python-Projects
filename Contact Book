import sqlite3

# Initialize the database
def initialize_database():
    conn = sqlite3.connect("contacts.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS contacts (
            id INTEGER PRIMARY KEY,
            first_name TEXT,
            last_name TEXT,
            phone_number TEXT,
            email TEXT,
            address TEXT
        )
    """)
    conn.commit()
    conn.close()

# Add a new contact
def add_contact():
    first_name = input("Enter first name: ")
    last_name = input("Enter last name: ")
    phone_number = input("Enter phone number: ")
    email = input("Enter email: ")
    address = input("Enter address: ")

    conn = sqlite3.connect("contacts.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO contacts (first_name, last_name, phone_number, email, address)
        VALUES (?, ?, ?, ?, ?)
    """, (first_name, last_name, phone_number, email, address))
    conn.commit()
    conn.close()
    print("Contact added successfully!")

# View all contacts
def view_contacts():
    conn = sqlite3.connect("contacts.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM contacts")
    contacts = cursor.fetchall()
    conn.close()

    if not contacts:
        print("No contacts found.")
    else:
        print("\nContact List:")
        for contact in contacts:
            print(f"{contact[1]} {contact[2]} | Phone: {contact[3]} | Email: {contact[4]}")

# Search for a contact
def search_contact():
    keyword = input("Enter name or phone number to search: ")
    conn = sqlite3.connect("contacts.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT * FROM contacts
        WHERE first_name LIKE ? OR last_name LIKE ? OR phone_number LIKE ?
    """, (f"%{keyword}%", f"%{keyword}%", f"%{keyword}%"))
    results = cursor.fetchall()
    conn.close()

    if not results:
        print("No matching contacts found.")
    else:
        print("\nSearch Results:")
        for contact in results:
            print(f"{contact[1]} {contact[2]} | Phone: {contact[3]} | Email: {contact[4]}")

# Update a contact
def update_contact():
    contact_id = int(input("Enter the ID of the contact to update: "))
    # Implement the update logic here

# Delete a contact
def delete_contact():
    contact_id = int(input("Enter the ID of the contact to delete: "))
    # Implement the delete logic here

def main():
    initialize_database()
    while True:
        print("\nContact Management System")
        print("1. Add Contact")
        print("2. View Contacts")
        print("3. Search Contact")
        print("4. Update Contact")
        print("5. Delete Contact")
        print("6. Exit")
        choice = input("Enter your choice (1/2/3/4/5/6): ")

        if choice == "1":
            add_contact()
        elif choice == "2":
            view_contacts()
        elif choice == "3":
            search_contact()
        elif choice == "4":
            update_contact()
        elif choice == "5":
            delete_contact()
        elif choice == "6":
            print("Exiting Contact Management System. Have a great day!")
            break
        else:
            print("Invalid choice. Please select a valid option.")

if __name__ == "__main__":
    main()
